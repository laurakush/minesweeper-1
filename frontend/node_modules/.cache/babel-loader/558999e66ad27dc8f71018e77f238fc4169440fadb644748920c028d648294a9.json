{"ast":null,"code":"import { Game, Mine } from './gameDomain';\nconst MINE = -1;\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// Helper functions\nfunction isMine(mine) {\n  return mine.bombs === MINE;\n}\nfunction traverseNeighbors(board, mine, callback) {\n  const {\n    x,\n    y\n  } = mine.pos;\n  for (let i = 0; i < dx.length; i++) {\n    const newX = x + dx[i];\n    const newY = y + dy[i];\n\n    // Check if coordinates are within bounds\n    if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n      callback(board[newX][newY]);\n    }\n  }\n}\nfunction fillBoard(rows, cols, mines) {\n  const board = [];\n\n  // Initialize a board with no mines\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(new Mine({\n        x: i,\n        y: j\n      }, 0, false, false));\n    }\n    board.push(row);\n  }\n\n  // Place mines randomly on the board\n  let minesPlaced = 0;\n  while (minesPlaced < mines) {\n    let x = Math.floor(Math.random() * rows);\n    let y = Math.floor(Math.random() * cols);\n\n    // Check if the mine is already placed\n    if (!isMine(board[x][y])) {\n      board[x][y].bombs = MINE;\n      minesPlaced++;\n    }\n  }\n\n  // Calculate numbers for each cell\n  fillBombsCount(board);\n  return board;\n}\nfunction fillBombsCount(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const cell = board[i][j];\n\n      // Skip mines\n      if (isMine(cell)) continue;\n\n      // Count mines in neighboring cells\n      let count = 0;\n      traverseNeighbors(board, cell, neighbor => {\n        if (isMine(neighbor)) {\n          count++;\n        }\n      });\n      cell.bombs = count;\n    }\n  }\n}\nfunction newGame(rows, cols, mines) {\n  const board = fillBoard(rows, cols, mines);\n  return new Game(board, false, mines);\n}\nfunction openCell(game, field) {\n  if (field.isFlagged || field.isOpened) return game;\n  const newState = createDeepCopy(game.state);\n  const clickedCell = newState[field.pos.x][field.pos.y];\n\n  // If mine, game over\n  if (isMine(clickedCell)) {\n    revealAllMines(newState);\n    return new Game(newState, true, game.totBombs);\n  }\n\n  // Open the cell\n  clickedCell.isOpened = true;\n\n  // If empty, open surrounding cells\n  if (clickedCell.bombs === 0) {\n    openEmptyCells(newState, clickedCell);\n  }\n  return new Game(newState, false, game.totBombs);\n}\nfunction openEmptyCells(board, startCell) {\n  const visited = new Set();\n  const queue = [startCell];\n  while (queue.length > 0) {\n    const cell = queue.shift();\n    const key = `${cell.pos.x},${cell.pos.y}`;\n    if (visited.has(key)) continue;\n    visited.add(key);\n    cell.isOpened = true;\n\n    // If cell has no adjacent mines, explore neighbors\n    if (cell.bombs === 0) {\n      traverseNeighbors(board, cell, neighbor => {\n        if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n          queue.push(neighbor);\n        }\n      });\n    }\n  }\n}\nfunction toggleFlag(game, field) {\n  if (field.isOpened) return game;\n  const newState = createDeepCopy(game.state);\n  const cell = newState[field.pos.x][field.pos.y];\n  cell.isFlagged = !cell.isFlagged;\n  return new Game(newState, game.isOver, game.totBombs);\n}\nfunction checkCompleted(game) {\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      const cell = game.state[i][j];\n\n      // If a non-mine cell is not opened, game is not complete\n      if (!isMine(cell) && !cell.isOpened) {\n        return false;\n      }\n\n      // If a mine is not flagged, game is not complete\n      if (isMine(cell) && !cell.isFlagged) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction countFlagged(game) {\n  let count = 0;\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      if (game.state[i][j].isFlagged) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction revealAllMines(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (isMine(board[i][j])) {\n        board[i][j].isOpened = true;\n      }\n    }\n  }\n}\nfunction createDeepCopy(state) {\n  return state.map(row => row.map(cell => new Mine({\n    x: cell.pos.x,\n    y: cell.pos.y\n  }, cell.bombs, cell.isFlagged, cell.isOpened)));\n}\nexport const game = {\n  newGame,\n  fillBombsCount,\n  countFlagged,\n  isCompleted: checkCompleted,\n  markMine: toggleFlag,\n  openMine: openCell\n};","map":{"version":3,"names":["Game","Mine","MINE","dx","dy","isMine","mine","bombs","traverseNeighbors","board","callback","x","y","pos","i","length","newX","newY","fillBoard","rows","cols","mines","row","j","push","minesPlaced","Math","floor","random","fillBombsCount","cell","count","neighbor","newGame","openCell","game","field","isFlagged","isOpened","newState","createDeepCopy","state","clickedCell","revealAllMines","totBombs","openEmptyCells","startCell","visited","Set","queue","shift","key","has","add","toggleFlag","isOver","checkCompleted","countFlagged","map","isCompleted","markMine","openMine"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/gameLogic/game.ts"],"sourcesContent":["import { Game, Mine, Point } from './gameDomain';\n\nconst MINE = -1;\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// Helper functions\nfunction isMine(mine: Mine): boolean {\n    return mine.bombs === MINE;\n}\n\nfunction traverseNeighbors(board: Mine[][], mine: Mine, callback: (field: Mine) => void): void {\n    const { x, y } = mine.pos;\n    \n    for (let i = 0; i < dx.length; i++) {\n        const newX = x + dx[i];\n        const newY = y + dy[i];\n        \n        // Check if coordinates are within bounds\n        if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n            callback(board[newX][newY]);\n        }\n    }\n}\n\nfunction fillBoard(rows: number, cols: number, mines: number): Array<Array<Mine>> {\n    const board: Mine[][] = [];\n\n    // Initialize a board with no mines\n    for(let i = 0; i < rows; i++){\n        const row: Mine[] = [];\n        for(let j = 0; j < cols; j++){\n            row.push(new Mine({x: i, y: j}, 0, false, false));\n        }\n        board.push(row);\n    }\n\n    // Place mines randomly on the board\n    let minesPlaced = 0;\n    while (minesPlaced < mines) {\n        let x = Math.floor(Math.random() * rows);\n        let y = Math.floor(Math.random() * cols);\n\n        // Check if the mine is already placed\n        if (!isMine(board[x][y])) {\n            board[x][y].bombs = MINE;\n            minesPlaced++;\n        }\n    }\n    \n    // Calculate numbers for each cell\n    fillBombsCount(board);\n    \n    return board;\n}\n\nfunction fillBombsCount(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            const cell = board[i][j];\n            \n            // Skip mines\n            if (isMine(cell)) continue;\n            \n            // Count mines in neighboring cells\n            let count = 0;\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (isMine(neighbor)) {\n                    count++;\n                }\n            });\n            \n            cell.bombs = count;\n        }\n    }\n}\n\nfunction newGame(rows: number, cols: number, mines: number): Game {\n    const board = fillBoard(rows, cols, mines);\n    return new Game(board, false, mines);\n}\n\nfunction openCell(game: Game, field: Mine): Game {\n    if (field.isFlagged || field.isOpened) return game;\n    \n    const newState = createDeepCopy(game.state);\n    const clickedCell = newState[field.pos.x][field.pos.y];\n    \n    // If mine, game over\n    if (isMine(clickedCell)) {\n        revealAllMines(newState);\n        return new Game(newState, true, game.totBombs);\n    }\n    \n    // Open the cell\n    clickedCell.isOpened = true;\n    \n    // If empty, open surrounding cells\n    if (clickedCell.bombs === 0) {\n        openEmptyCells(newState, clickedCell);\n    }\n    \n    return new Game(newState, false, game.totBombs);\n}\n\nfunction openEmptyCells(board: Array<Array<Mine>>, startCell: Mine): void {\n    const visited = new Set<string>();\n    const queue: Mine[] = [startCell];\n    \n    while (queue.length > 0) {\n        const cell = queue.shift()!;\n        const key = `${cell.pos.x},${cell.pos.y}`;\n        \n        if (visited.has(key)) continue;\n        visited.add(key);\n        \n        cell.isOpened = true;\n        \n        // If cell has no adjacent mines, explore neighbors\n        if (cell.bombs === 0) {\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n                    queue.push(neighbor);\n                }\n            });\n        }\n    }\n}\n\nfunction toggleFlag(game: Game, field: Mine): Game {\n    if (field.isOpened) return game;\n    \n    const newState = createDeepCopy(game.state);\n    const cell = newState[field.pos.x][field.pos.y];\n    cell.isFlagged = !cell.isFlagged;\n    \n    return new Game(newState, game.isOver, game.totBombs);\n}\n\nfunction checkCompleted(game: Game): boolean {\n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            const cell = game.state[i][j];\n            \n            // If a non-mine cell is not opened, game is not complete\n            if (!isMine(cell) && !cell.isOpened) {\n                return false;\n            }\n            \n            // If a mine is not flagged, game is not complete\n            if (isMine(cell) && !cell.isFlagged) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nfunction countFlagged(game: Game): number {\n    let count = 0;\n    \n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            if (game.state[i][j].isFlagged) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\nfunction revealAllMines(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (isMine(board[i][j])) {\n                board[i][j].isOpened = true;\n            }\n        }\n    }\n}\n\nfunction createDeepCopy(state: Array<Array<Mine>>): Array<Array<Mine>> {\n    return state.map(row => \n        row.map(cell => \n            new Mine(\n                { x: cell.pos.x, y: cell.pos.y },\n                cell.bombs,\n                cell.isFlagged,\n                cell.isOpened\n            )\n        )\n    );\n}\n\nexport const game = {\n    newGame,\n    fillBombsCount,\n    countFlagged,\n    isCompleted: checkCompleted,\n    markMine: toggleFlag,\n    openMine: openCell\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}