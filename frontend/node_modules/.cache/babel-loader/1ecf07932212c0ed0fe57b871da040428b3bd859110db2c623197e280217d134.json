{"ast":null,"code":"const API_URL = 'http://localhost:5001/api';\n\n// Helper to handle response and errors\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Something went wrong');\n  }\n  return response.json();\n};\n\n// Auth token management\nconst getToken = () => localStorage.getItem('token');\nconst setToken = token => localStorage.setItem('token', token);\nconst removeToken = () => localStorage.removeItem('token');\n\n// Headers with auth token\nconst getHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const token = getToken();\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await handleResponse(response);\n    setToken(data.access_token);\n    return data;\n  },\n  login: async credentials => {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await handleResponse(response);\n    setToken(data.access_token);\n    return data;\n  },\n  logout: () => {\n    removeToken();\n  },\n  getCurrentUser: async () => {\n    const response = await fetch(`${API_URL}/user`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  isAuthenticated: () => {\n    return !!getToken();\n  }\n};\n\n// Game stats API\nexport const gameStatsAPI = {\n  saveGameStats: async gameData => {\n    const response = await fetch(`${API_URL}/game-stats`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(gameData)\n    });\n    return handleResponse(response);\n  },\n  getUserGameStats: async () => {\n    const response = await fetch(`${API_URL}/user/game-stats`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getStatsSummary: async () => {\n    const response = await fetch(`${API_URL}/user/game-stats/summary`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  }\n};\nexport default {\n  auth: authAPI,\n  gameStats: gameStatsAPI\n};","map":{"version":3,"names":["API_URL","handleResponse","response","ok","error","json","Error","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getHeaders","headers","authAPI","register","userData","fetch","method","body","JSON","stringify","data","access_token","login","credentials","logout","getCurrentUser","isAuthenticated","gameStatsAPI","saveGameStats","gameData","getUserGameStats","getStatsSummary","auth","gameStats"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/frontend/src/api/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5001/api';\n\n// Helper to handle response and errors\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Something went wrong');\n  }\n  return response.json();\n};\n\n// Auth token management\nconst getToken = () => localStorage.getItem('token');\nconst setToken = (token) => localStorage.setItem('token', token);\nconst removeToken = () => localStorage.removeItem('token');\n\n// Headers with auth token\nconst getHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  \n  const token = getToken();\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  return headers;\n};\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    \n    const data = await handleResponse(response);\n    setToken(data.access_token);\n    return data;\n  },\n  \n  login: async (credentials) => {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n    \n    const data = await handleResponse(response);\n    setToken(data.access_token);\n    return data;\n  },\n  \n  logout: () => {\n    removeToken();\n  },\n  \n  getCurrentUser: async () => {\n    const response = await fetch(`${API_URL}/user`, {\n      headers: getHeaders(),\n    });\n    \n    return handleResponse(response);\n  },\n  \n  isAuthenticated: () => {\n    return !!getToken();\n  },\n};\n\n// Game stats API\nexport const gameStatsAPI = {\n  saveGameStats: async (gameData) => {\n    const response = await fetch(`${API_URL}/game-stats`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(gameData),\n    });\n    \n    return handleResponse(response);\n  },\n  \n  getUserGameStats: async () => {\n    const response = await fetch(`${API_URL}/user/game-stats`, {\n      headers: getHeaders(),\n    });\n    \n    return handleResponse(response);\n  },\n  \n  getStatsSummary: async () => {\n    const response = await fetch(`${API_URL}/user/game-stats/summary`, {\n      headers: getHeaders(),\n    });\n    \n    return handleResponse(response);\n  },\n};\n\nexport default {\n  auth: authAPI,\n  gameStats: gameStatsAPI,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}