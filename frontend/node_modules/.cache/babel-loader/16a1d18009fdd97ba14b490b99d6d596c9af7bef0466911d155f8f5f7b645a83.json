{"ast":null,"code":"var _jsxFileName = \"/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/frontend/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { time } from '../gameLogic/time';\nimport { GameControls, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\nimport { gameStatsAPI } from '../api/api';\nimport { authAPI } from '../api/api';\nimport '../styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  initialRows,\n  initialCols,\n  initialMines,\n  initialDifficulty\n}) => {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState(game.newGame(initialRows, initialCols, initialMines));\n  const [flaggedCount, setFlaggedCount] = useState(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n  const [savedGame, setSavedGame] = useState(false);\n\n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState(initialDifficulty);\n\n  // Timer logic\n  useEffect(() => {\n    // Stop timer if game is over (win or loss)\n    if (gameState.isOver) return;\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Update state after each move\n  useEffect(() => {\n    setFlaggedCount(game.countFlagged(gameState));\n\n    // If game just ended, save the stats\n    if (gameState.isOver && !savedGame) {\n      saveGameStats();\n    }\n  }, [gameState]);\n\n  // Save game stats to backend when game ends\n  const saveGameStats = useCallback(() => {\n    // Only save if user is authenticated\n    if (authAPI.isAuthenticated() && gameState.isOver && !savedGame) {\n      const gameData = {\n        difficulty: currentDifficulty,\n        time_taken: elapsedSeconds,\n        is_win: gameState.isWon,\n        mines_flagged: flaggedCount,\n        cells_opened: gameState.openedCells\n      };\n      gameStatsAPI.saveGameStats(gameData).then(() => {\n        console.log('Game stats saved successfully');\n        setSavedGame(true);\n      }).catch(error => {\n        console.error('Failed to save game stats:', error);\n      });\n    }\n  }, [gameState, currentDifficulty, elapsedSeconds, flaggedCount, savedGame]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback(field => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field, e) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n\n    // Prevent context menu from showing\n    e.preventDefault();\n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback(difficulty => {\n    const config = DIFFICULTY[difficulty];\n    const {\n      rows: newRows,\n      cols: newCols,\n      mines: newMines\n    } = config;\n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n    setSavedGame(false);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      flagCount: flaggedCount,\n      totalBombs: gameState.totBombs,\n      elapsedTime: elapsedSeconds,\n      formattedTime: formattedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(GameControls, {\n        currentDifficulty: currentDifficulty,\n        isGameOver: gameState.isOver,\n        onNewGame: startNewGame,\n        onReset: resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MineField, {\n        game: gameState,\n        onLeftClick: handleLeftClick,\n        onRightClick: handleRightClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), gameState.isOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-result ${gameState.isWon ? 'win' : 'lose'}`,\n        children: [gameState.isWon ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDF89 You Win! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCA5 Game Over! \\uD83D\\uDCA5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameState.isWon ? `You completed the game in ${formattedTime}!` : 'Better luck next time!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"uulSH6KK93YEFSbzD5468DGoIGQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MineField","game","time","GameControls","DIFFICULTY","GameHeader","gameStatsAPI","authAPI","jsxDEV","_jsxDEV","Game","initialRows","initialCols","initialMines","initialDifficulty","_s","gameState","setGameState","newGame","flaggedCount","setFlaggedCount","elapsedSeconds","setElapsedSeconds","savedGame","setSavedGame","currentDifficulty","setCurrentDifficulty","isOver","timerId","setInterval","prev","clearInterval","countFlagged","saveGameStats","isAuthenticated","gameData","difficulty","time_taken","is_win","isWon","mines_flagged","cells_opened","openedCells","then","console","log","catch","error","handleLeftClick","field","openMine","handleRightClick","e","preventDefault","markMine","startNewGame","config","rows","newRows","cols","newCols","mines","newMines","resetGame","formattedTime","timer","children","flagCount","totalBombs","totBombs","elapsedTime","fileName","_jsxFileName","lineNumber","columnNumber","className","isGameOver","onNewGame","onReset","onLeftClick","onRightClick","_c","$RefreshReg$"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/frontend/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { Game as GameType, Mine } from '../gameLogic/gameDomain';\nimport { time } from '../gameLogic/time';\nimport { GameControls, DifficultyLevel, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\nimport { gameStatsAPI } from '../api/api';\nimport { authAPI } from '../api/api';\nimport '../styles/Game.css';\n\ninterface GameProps {\n  initialRows: number;\n  initialCols: number;\n  initialMines: number;\n  initialDifficulty: DifficultyLevel;\n}\n\nconst Game: React.FC<GameProps> = ({ \n  initialRows, \n  initialCols, \n  initialMines,\n  initialDifficulty \n}) => {\n  // Game state\n  const [gameState, setGameState] = useState<GameType>(\n    game.newGame(initialRows, initialCols, initialMines)\n  );\n  const [flaggedCount, setFlaggedCount] = useState<number>(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState<number>(0);\n  const [savedGame, setSavedGame] = useState<boolean>(false);\n  \n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState<DifficultyLevel>(initialDifficulty);\n\n  // Timer logic\n  useEffect(() => {\n    // Stop timer if game is over (win or loss)\n    if (gameState.isOver) return;\n\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Update state after each move\n  useEffect(() => {\n    setFlaggedCount(game.countFlagged(gameState));\n    \n    // If game just ended, save the stats\n    if (gameState.isOver && !savedGame) {\n      saveGameStats();\n    }\n  }, [gameState]);\n\n  // Save game stats to backend when game ends\n  const saveGameStats = useCallback(() => {\n    // Only save if user is authenticated\n    if (authAPI.isAuthenticated() && gameState.isOver && !savedGame) {\n      const gameData = {\n        difficulty: currentDifficulty,\n        time_taken: elapsedSeconds,\n        is_win: gameState.isWon,\n        mines_flagged: flaggedCount,\n        cells_opened: gameState.openedCells\n      };\n      \n      gameStatsAPI.saveGameStats(gameData)\n        .then(() => {\n          console.log('Game stats saved successfully');\n          setSavedGame(true);\n        })\n        .catch(error => {\n          console.error('Failed to save game stats:', error);\n        });\n    }\n  }, [gameState, currentDifficulty, elapsedSeconds, flaggedCount, savedGame]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback((field: Mine) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    \n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field: Mine, e: React.MouseEvent) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    \n    // Prevent context menu from showing\n    e.preventDefault();\n    \n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback((difficulty: DifficultyLevel) => {\n    const config = DIFFICULTY[difficulty];\n    const { rows: newRows, cols: newCols, mines: newMines } = config;\n    \n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n    setSavedGame(false);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n\n  return (\n    <div>\n      <GameHeader\n        flagCount={flaggedCount}\n        totalBombs={gameState.totBombs}\n        elapsedTime={elapsedSeconds}\n        formattedTime={formattedTime}\n      />\n      \n      <div className=\"game\">\n        <GameControls\n          currentDifficulty={currentDifficulty}\n          isGameOver={gameState.isOver}\n          onNewGame={startNewGame}\n          onReset={resetGame}\n        />\n        \n        <MineField\n          game={gameState}\n          onLeftClick={handleLeftClick}\n          onRightClick={handleRightClick}\n        />\n\n        {gameState.isOver && (\n          <div className={`game-result ${gameState.isWon ? 'win' : 'lose'}`}>\n            {gameState.isWon ? \n              <h2>🎉 You Win! 🎉</h2> : \n              <h2>💥 Game Over! 💥</h2>\n            }\n            <p>{gameState.isWon ? \n                 `You completed the game in ${formattedTime}!` : \n                 'Better luck next time!'}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}