{"ast":null,"code":"var _jsxFileName = \"/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { time } from '../util/time';\nimport { GameControls, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  initialRows,\n  initialCols,\n  initialMines,\n  initialDifficulty\n}) => {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState(game.newGame(initialRows, initialCols, initialMines));\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [flaggedCount, setFlaggedCount] = useState(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n\n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState(initialDifficulty);\n\n  // Function to check for win state by examining the game board directly\n  const checkWin = gameState => {\n    // If a mine has exploded, it's not a win\n    if (gameState.isOver) {\n      return false;\n    }\n\n    // Check if all non-mine cells are opened\n    for (let i = 0; i < gameState.state.length; i++) {\n      for (let j = 0; j < gameState.state[i].length; j++) {\n        const cell = gameState.state[i][j];\n\n        // If we find a non-mine cell that's not opened, game is not won\n        if (cell.bombs !== -1 && !cell.isOpened) {\n          return false;\n        }\n      }\n    }\n\n    // All non-mine cells are opened and no mine exploded\n    return true;\n  };\n\n  // Timer logic\n  useEffect(() => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Check game status after each move\n  useEffect(() => {\n    const completed = game.isCompleted(gameState);\n    setIsCompleted(completed);\n    setFlaggedCount(game.countFlagged(gameState));\n  }, [gameState]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback(field => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field, e) => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n\n    // Prevent context menu from showing\n    e.preventDefault();\n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback(difficulty => {\n    const config = DIFFICULTY[difficulty];\n    const {\n      rows: newRows,\n      cols: newCols,\n      mines: newMines\n    } = config;\n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setIsCompleted(false);\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n\n  // Use our own win detection instead of relying on isCompleted\n  const isWin = checkWin(gameState);\n  const isGameOver = isWin || gameState.isOver;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      flagCount: flaggedCount,\n      totalBombs: gameState.totBombs,\n      elapsedTime: elapsedSeconds,\n      formattedTime: formattedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(GameControls, {\n        currentDifficulty: currentDifficulty,\n        isGameOver: isGameOver,\n        onNewGame: startNewGame,\n        onReset: resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MineField, {\n        game: gameState,\n        onLeftClick: handleLeftClick,\n        onRightClick: handleRightClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-result ${isWin ? 'win' : 'lose'}`,\n        children: [isWin ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDF89 You Win! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCA5 Game Over! \\uD83D\\uDCA5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isWin ? `You completed the game in ${formattedTime}!` : 'Better luck next time!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"YnEYd6a1tx9UigmoRrTnv5cBpLo=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MineField","game","time","GameControls","DIFFICULTY","GameHeader","jsxDEV","_jsxDEV","Game","initialRows","initialCols","initialMines","initialDifficulty","_s","gameState","setGameState","newGame","isCompleted","setIsCompleted","flaggedCount","setFlaggedCount","elapsedSeconds","setElapsedSeconds","currentDifficulty","setCurrentDifficulty","checkWin","isOver","i","state","length","j","cell","bombs","isOpened","winState","timerId","setInterval","prev","clearInterval","completed","countFlagged","handleLeftClick","field","openMine","handleRightClick","e","preventDefault","markMine","startNewGame","difficulty","config","rows","newRows","cols","newCols","mines","newMines","resetGame","formattedTime","timer","isWin","isGameOver","children","flagCount","totalBombs","totBombs","elapsedTime","fileName","_jsxFileName","lineNumber","columnNumber","className","onNewGame","onReset","onLeftClick","onRightClick","_c","$RefreshReg$"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { Game as GameType, Mine } from '../gameLogic/gameDomain';\nimport { time } from '../util/time';\nimport { GameControls, DifficultyLevel, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\n\ninterface GameProps {\n  initialRows: number;\n  initialCols: number;\n  initialMines: number;\n  initialDifficulty: DifficultyLevel;\n}\n\nconst Game: React.FC<GameProps> = ({ \n  initialRows, \n  initialCols, \n  initialMines,\n  initialDifficulty \n}) => {\n  // Game state\n  const [gameState, setGameState] = useState<GameType>(\n    game.newGame(initialRows, initialCols, initialMines)\n  );\n  const [isCompleted, setIsCompleted] = useState<boolean>(false);\n  const [flaggedCount, setFlaggedCount] = useState<number>(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState<number>(0);\n  \n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState<DifficultyLevel>(initialDifficulty);\n\n  // Function to check for win state by examining the game board directly\n  const checkWin = (gameState: GameType): boolean => {\n    // If a mine has exploded, it's not a win\n    if (gameState.isOver) {\n      return false;\n    }\n    \n    // Check if all non-mine cells are opened\n    for (let i = 0; i < gameState.state.length; i++) {\n      for (let j = 0; j < gameState.state[i].length; j++) {\n        const cell = gameState.state[i][j];\n        \n        // If we find a non-mine cell that's not opened, game is not won\n        if (cell.bombs !== -1 && !cell.isOpened) {\n          return false;\n        }\n      }\n    }\n    \n    // All non-mine cells are opened and no mine exploded\n    return true;\n  };\n\n  // Timer logic\n  useEffect(() => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Check game status after each move\n  useEffect(() => {\n    const completed = game.isCompleted(gameState);\n    setIsCompleted(completed);\n    setFlaggedCount(game.countFlagged(gameState));\n  }, [gameState]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback((field: Mine) => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n    \n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field: Mine, e: React.MouseEvent) => {\n    // Use our own win check instead of isCompleted\n    const winState = checkWin(gameState);\n    if (winState || gameState.isOver) return;\n    \n    // Prevent context menu from showing\n    e.preventDefault();\n    \n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback((difficulty: DifficultyLevel) => {\n    const config = DIFFICULTY[difficulty];\n    const { rows: newRows, cols: newCols, mines: newMines } = config;\n    \n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setIsCompleted(false);\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n  \n  // Use our own win detection instead of relying on isCompleted\n  const isWin = checkWin(gameState);\n  const isGameOver = isWin || gameState.isOver;\n\n  return (\n    <div>\n      <GameHeader\n        flagCount={flaggedCount}\n        totalBombs={gameState.totBombs}\n        elapsedTime={elapsedSeconds}\n        formattedTime={formattedTime}\n      />\n      \n      <div className=\"game\">\n        <GameControls\n          currentDifficulty={currentDifficulty}\n          isGameOver={isGameOver}\n          onNewGame={startNewGame}\n          onReset={resetGame}\n        />\n        \n        <MineField\n          game={gameState}\n          onLeftClick={handleLeftClick}\n          onRightClick={handleRightClick}\n        />\n\n        {isGameOver && (\n          <div className={`game-result ${isWin ? 'win' : 'lose'}`}>\n            {isWin ? \n              <h2>🎉 You Win! 🎉</h2> : \n              <h2>💥 Game Over! 💥</h2>\n            }\n            <p>{isWin ? `You completed the game in ${formattedTime}!` : 'Better luck next time!'}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}