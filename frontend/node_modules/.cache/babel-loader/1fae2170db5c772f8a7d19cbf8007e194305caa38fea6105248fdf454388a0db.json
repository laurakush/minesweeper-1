{"ast":null,"code":"import { Game, Mine } from './gameDomain';\n\n// Constants\nconst MINE = -1;\n\n// Direction arrays for traversing neighboring cells (8 directions)\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// ==============================\n// Utility Functions\n// ==============================\n\n//Checks if a cell contains a mine\nfunction isMine(mine) {\n  return mine.bombs === MINE;\n}\n\n//Creates a deep copy of the game board\nfunction createDeepCopy(state) {\n  return state.map(row => row.map(cell => new Mine({\n    x: cell.pos.x,\n    y: cell.pos.y\n  }, cell.bombs, cell.isFlagged, cell.isOpened)));\n}\n\n//Performs an operation on all neighboring cells of a given cell\nfunction traverseNeighbors(board, mine, callback) {\n  const {\n    x,\n    y\n  } = mine.pos;\n  for (let i = 0; i < dx.length; i++) {\n    const newX = x + dx[i];\n    const newY = y + dy[i];\n\n    // Check if coordinates are within bounds\n    if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n      callback(board[newX][newY]);\n    }\n  }\n}\n\n// ==============================\n// Board Generation Functions\n// ==============================\n\n//Creates an empty board with no mines\nfunction createEmptyBoard(rows, cols) {\n  const board = [];\n\n  // Initialize a board with no mines\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(new Mine({\n        x: i,\n        y: j\n      }, 0, false, false));\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n// Places mines on the board after the first click\nfunction placeMines(board, firstClickPos, totalMines) {\n  const rows = board.length;\n  const cols = board[0].length;\n\n  // Set of positions to avoid (first click and its neighbors)\n  const safePositions = new Set();\n\n  // Add first click position to safe set\n  safePositions.add(`${firstClickPos.x},${firstClickPos.y}`);\n\n  // Add neighboring positions to safe set\n  traverseNeighbors(board, board[firstClickPos.x][firstClickPos.y], neighbor => {\n    safePositions.add(`${neighbor.pos.x},${neighbor.pos.y}`);\n  });\n\n  // Place mines randomly on the board, avoiding safe positions\n  let minesPlaced = 0;\n  while (minesPlaced < totalMines) {\n    const x = Math.floor(Math.random() * rows);\n    const y = Math.floor(Math.random() * cols);\n    const posKey = `${x},${y}`;\n\n    // Check if position is safe and doesn't already have a mine\n    if (!safePositions.has(posKey) && !isMine(board[x][y])) {\n      board[x][y].bombs = MINE;\n      minesPlaced++;\n    }\n  }\n\n  // Calculate numbers for each cell\n  fillBombsCount(board);\n}\n\n//Calculates the number of adjacent mines for each cell\nfunction fillBombsCount(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const cell = board[i][j];\n\n      // Skip mines\n      if (isMine(cell)) continue;\n\n      // Count mines in neighboring cells\n      let count = 0;\n      traverseNeighbors(board, cell, neighbor => {\n        if (isMine(neighbor)) {\n          count++;\n        }\n      });\n      cell.bombs = count;\n    }\n  }\n}\n\n// Creates a new empty game (no mines placed yet)\nfunction newGame(rows, cols, mines) {\n  const board = createEmptyBoard(rows, cols);\n  return new Game(board, false, mines);\n}\n\n// ==============================\n// Game Action Functions\n// ==============================\n\n//Handles the first click in a game\nfunction handleFirstClick(game, field) {\n  // Create a deep copy of the board\n  const newState = createDeepCopy(game.state);\n\n  // Place mines, avoiding first click and its neighbors\n  placeMines(newState, field.pos, game.totBombs);\n\n  // Open the clicked cell and surrounding cells if it's a 0\n  const clickedCell = newState[field.pos.x][field.pos.y];\n  clickedCell.isOpened = true;\n  if (clickedCell.bombs === 0) {\n    openEmptyCells(newState, clickedCell);\n  }\n  return new Game(newState, false, game.totBombs);\n}\n\n// Opens a cell on the board\nfunction openCell(game, field) {\n  // Skip if cell is already opened or flagged\n  if (field.isFlagged || field.isOpened) return game;\n\n  // Check if this is the first click\n  const isFirstClick = game.openedCells === 0 && !game.state.some(row => row.some(cell => isMine(cell)));\n\n  // Handle first click specially\n  if (isFirstClick) {\n    return handleFirstClick(game, field);\n  }\n\n  // Regular click handling for subsequent clicks\n  const newState = createDeepCopy(game.state);\n  const clickedCell = newState[field.pos.x][field.pos.y];\n\n  // If mine, game over\n  if (isMine(clickedCell)) {\n    revealAllMines(newState);\n    return new Game(newState, true, game.totBombs, game.openedCells, game.flaggedCells);\n  }\n\n  // Open the cell and increment counter\n  clickedCell.isOpened = true;\n  let newOpenedCount = game.openedCells + 1;\n\n  // If empty, open surrounding cells\n  if (clickedCell.bombs === 0) {\n    // We'd need to track how many cells were opened in openEmptyCells\n    const openedCellsCount = openEmptyCells(newState, clickedCell);\n    newOpenedCount += openedCellsCount;\n  }\n  return new Game(newState, false, game.totBombs, newOpenedCount, game.flaggedCells);\n}\n\n//Recursively opens empty cells\nfunction openEmptyCells(board, startCell) {\n  const visited = new Set();\n  const queue = [startCell];\n  while (queue.length > 0) {\n    const cell = queue.shift();\n    const key = `${cell.pos.x},${cell.pos.y}`;\n    if (visited.has(key)) continue;\n    visited.add(key);\n    cell.isOpened = true;\n\n    // If cell has no adjacent mines, explore neighbors\n    if (cell.bombs === 0) {\n      traverseNeighbors(board, cell, neighbor => {\n        if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n          queue.push(neighbor);\n        }\n      });\n    }\n  }\n}\n\n//Toggles a flag on a cell\nfunction toggleFlag(game, field) {\n  if (field.isOpened) return game;\n  const newState = createDeepCopy(game.state);\n  const cell = newState[field.pos.x][field.pos.y];\n\n  // Toggle flag and update counter\n  cell.isFlagged = !cell.isFlagged;\n  const newFlaggedCount = cell.isFlagged ? game.flaggedCells + 1 : game.flaggedCells - 1;\n  return new Game(newState, game.isOver, game.totBombs, game.openedCells, newFlaggedCount);\n}\n\n// ==============================\n// Game State Functions\n// ==============================\n\n//Checks if the game is completed\nfunction checkCompleted(game) {\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      const cell = game.state[i][j];\n\n      // If a non-mine cell is not opened, game is not complete\n      if (!isMine(cell) && !cell.isOpened) {\n        return false;\n      }\n\n      // If a mine is not flagged, game is not complete\n      if (isMine(cell) && !cell.isFlagged) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//Counts the number of flagged cells\nfunction countFlagged(game) {\n  let count = 0;\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      if (game.state[i][j].isFlagged) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n//Reveals all mines on the board (used when game is over)\nfunction revealAllMines(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (isMine(board[i][j])) {\n        board[i][j].isOpened = true;\n      }\n    }\n  }\n}\n\n// ==============================\n// Public API\n// ==============================\n\nexport const game = {\n  newGame,\n  fillBombsCount,\n  countFlagged,\n  isCompleted: checkCompleted,\n  markMine: toggleFlag,\n  openMine: openCell\n};","map":{"version":3,"names":["Game","Mine","MINE","dx","dy","isMine","mine","bombs","createDeepCopy","state","map","row","cell","x","pos","y","isFlagged","isOpened","traverseNeighbors","board","callback","i","length","newX","newY","createEmptyBoard","rows","cols","j","push","placeMines","firstClickPos","totalMines","safePositions","Set","add","neighbor","minesPlaced","Math","floor","random","posKey","has","fillBombsCount","count","newGame","mines","handleFirstClick","game","field","newState","totBombs","clickedCell","openEmptyCells","openCell","isFirstClick","openedCells","some","revealAllMines","flaggedCells","newOpenedCount","openedCellsCount","startCell","visited","queue","shift","key","toggleFlag","newFlaggedCount","isOver","checkCompleted","countFlagged","isCompleted","markMine","openMine"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/gameLogic/game.ts"],"sourcesContent":["import { Game, Mine, Point } from './gameDomain';\n\n// Constants\nconst MINE = -1;\n\n// Direction arrays for traversing neighboring cells (8 directions)\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// ==============================\n// Utility Functions\n// ==============================\n\n//Checks if a cell contains a mine\nfunction isMine(mine: Mine): boolean {\n    return mine.bombs === MINE;\n}\n\n//Creates a deep copy of the game board\nfunction createDeepCopy(state: Array<Array<Mine>>): Array<Array<Mine>> {\n    return state.map(row => \n        row.map(cell => \n            new Mine(\n                { x: cell.pos.x, y: cell.pos.y },\n                cell.bombs,\n                cell.isFlagged,\n                cell.isOpened\n            )\n        )\n    );\n}\n\n//Performs an operation on all neighboring cells of a given cell\nfunction traverseNeighbors(board: Mine[][], mine: Mine, callback: (field: Mine) => void): void {\n    const { x, y } = mine.pos;\n    \n    for (let i = 0; i < dx.length; i++) {\n        const newX = x + dx[i];\n        const newY = y + dy[i];\n        \n        // Check if coordinates are within bounds\n        if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n            callback(board[newX][newY]);\n        }\n    }\n}\n\n// ==============================\n// Board Generation Functions\n// ==============================\n\n//Creates an empty board with no mines\nfunction createEmptyBoard(rows: number, cols: number): Array<Array<Mine>> {\n    const board: Mine[][] = [];\n\n    // Initialize a board with no mines\n    for(let i = 0; i < rows; i++){\n        const row: Mine[] = [];\n        for(let j = 0; j < cols; j++){\n            row.push(new Mine({x: i, y: j}, 0, false, false));\n        }\n        board.push(row);\n    }\n    \n    return board;\n}\n\n// Places mines on the board after the first click\nfunction placeMines(board: Array<Array<Mine>>, firstClickPos: Point, totalMines: number): void {\n    const rows = board.length;\n    const cols = board[0].length;\n    \n    // Set of positions to avoid (first click and its neighbors)\n    const safePositions = new Set<string>();\n    \n    // Add first click position to safe set\n    safePositions.add(`${firstClickPos.x},${firstClickPos.y}`);\n    \n    // Add neighboring positions to safe set\n    traverseNeighbors(board, board[firstClickPos.x][firstClickPos.y], (neighbor) => {\n        safePositions.add(`${neighbor.pos.x},${neighbor.pos.y}`);\n    });\n    \n    // Place mines randomly on the board, avoiding safe positions\n    let minesPlaced = 0;\n    while (minesPlaced < totalMines) {\n        const x = Math.floor(Math.random() * rows);\n        const y = Math.floor(Math.random() * cols);\n        const posKey = `${x},${y}`;\n\n        // Check if position is safe and doesn't already have a mine\n        if (!safePositions.has(posKey) && !isMine(board[x][y])) {\n            board[x][y].bombs = MINE;\n            minesPlaced++;\n        }\n    }\n    \n    // Calculate numbers for each cell\n    fillBombsCount(board);\n}\n\n//Calculates the number of adjacent mines for each cell\nfunction fillBombsCount(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            const cell = board[i][j];\n            \n            // Skip mines\n            if (isMine(cell)) continue;\n            \n            // Count mines in neighboring cells\n            let count = 0;\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (isMine(neighbor)) {\n                    count++;\n                }\n            });\n            \n            cell.bombs = count;\n        }\n    }\n}\n\n// Creates a new empty game (no mines placed yet)\nfunction newGame(rows: number, cols: number, mines: number): Game {\n    const board = createEmptyBoard(rows, cols);\n    return new Game(board, false, mines);\n}\n\n// ==============================\n// Game Action Functions\n// ==============================\n\n//Handles the first click in a game\nfunction handleFirstClick(game: Game, field: Mine): Game {\n    // Create a deep copy of the board\n    const newState = createDeepCopy(game.state);\n    \n    // Place mines, avoiding first click and its neighbors\n    placeMines(newState, field.pos, game.totBombs);\n    \n    // Open the clicked cell and surrounding cells if it's a 0\n    const clickedCell = newState[field.pos.x][field.pos.y];\n    clickedCell.isOpened = true;\n    \n    if (clickedCell.bombs === 0) {\n        openEmptyCells(newState, clickedCell);\n    }\n    \n    return new Game(newState, false, game.totBombs);\n}\n\n// Opens a cell on the board\nfunction openCell(game: Game, field: Mine): Game {\n    // Skip if cell is already opened or flagged\n    if (field.isFlagged || field.isOpened) return game;\n    \n    // Check if this is the first click\n    const isFirstClick = game.openedCells === 0 && !game.state.some(row => \n        row.some(cell => isMine(cell))\n    );\n    \n    // Handle first click specially\n    if (isFirstClick) {\n        return handleFirstClick(game, field);\n    }\n    \n    // Regular click handling for subsequent clicks\n    const newState = createDeepCopy(game.state);\n    const clickedCell = newState[field.pos.x][field.pos.y];\n    \n    // If mine, game over\n    if (isMine(clickedCell)) {\n        revealAllMines(newState);\n        return new Game(newState, true, game.totBombs, game.openedCells, game.flaggedCells);\n    }\n    \n    // Open the cell and increment counter\n    clickedCell.isOpened = true;\n    let newOpenedCount = game.openedCells + 1;\n    \n    // If empty, open surrounding cells\n    if (clickedCell.bombs === 0) {\n        // We'd need to track how many cells were opened in openEmptyCells\n        const openedCellsCount = openEmptyCells(newState, clickedCell);\n        newOpenedCount += openedCellsCount;\n    }\n    \n    return new Game(newState, false, game.totBombs, newOpenedCount, game.flaggedCells);\n}\n\n\n//Recursively opens empty cells\nfunction openEmptyCells(board: Array<Array<Mine>>, startCell: Mine): void {\n    const visited = new Set<string>();\n    const queue: Mine[] = [startCell];\n    \n    while (queue.length > 0) {\n        const cell = queue.shift()!;\n        const key = `${cell.pos.x},${cell.pos.y}`;\n        \n        if (visited.has(key)) continue;\n        visited.add(key);\n        \n        cell.isOpened = true;\n        \n        // If cell has no adjacent mines, explore neighbors\n        if (cell.bombs === 0) {\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n                    queue.push(neighbor);\n                }\n            });\n        }\n    }\n}\n\n//Toggles a flag on a cell\nfunction toggleFlag(game: Game, field: Mine): Game {\n    if (field.isOpened) return game;\n    \n    const newState = createDeepCopy(game.state);\n    const cell = newState[field.pos.x][field.pos.y];\n    \n    // Toggle flag and update counter\n    cell.isFlagged = !cell.isFlagged;\n    const newFlaggedCount = cell.isFlagged ? \n        game.flaggedCells + 1 : \n        game.flaggedCells - 1;\n    \n    return new Game(newState, game.isOver, game.totBombs, game.openedCells, newFlaggedCount);\n}\n\n// ==============================\n// Game State Functions\n// ==============================\n\n//Checks if the game is completed\nfunction checkCompleted(game: Game): boolean {\n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            const cell = game.state[i][j];\n            \n            // If a non-mine cell is not opened, game is not complete\n            if (!isMine(cell) && !cell.isOpened) {\n                return false;\n            }\n            \n            // If a mine is not flagged, game is not complete\n            if (isMine(cell) && !cell.isFlagged) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\n//Counts the number of flagged cells\nfunction countFlagged(game: Game): number {\n    let count = 0;\n    \n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            if (game.state[i][j].isFlagged) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n//Reveals all mines on the board (used when game is over)\nfunction revealAllMines(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (isMine(board[i][j])) {\n                board[i][j].isOpened = true;\n            }\n        }\n    }\n}\n\n// ==============================\n// Public API\n// ==============================\n\nexport const game = {\n    newGame,\n    fillBombsCount,\n    countFlagged,\n    isCompleted: checkCompleted,\n    markMine: toggleFlag,\n    openMine: openCell\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}