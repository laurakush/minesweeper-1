{"ast":null,"code":"import { Game, Mine } from './gameDomain';\nconst MINE = -1;\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// Helper functions\nfunction isMine(mine) {\n  return mine.bombs === MINE;\n}\nfunction traverseNeighbors(board, mine, callback) {\n  const {\n    x,\n    y\n  } = mine.pos;\n  for (let i = 0; i < dx.length; i++) {\n    const newX = x + dx[i];\n    const newY = y + dy[i];\n\n    // Check if coordinates are within bounds\n    if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n      callback(board[newX][newY]);\n    }\n  }\n}\n\n// Create an empty board with no mines\nfunction createEmptyBoard(rows, cols) {\n  const board = [];\n\n  // Initialize a board with no mines\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(new Mine({\n        x: i,\n        y: j\n      }, 0, false, false));\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n// Place mines after the first click\nfunction placeMines(board, firstClickPos, totalMines) {\n  const rows = board.length;\n  const cols = board[0].length;\n\n  // Set of positions to avoid (first click and its neighbors)\n  const safePositions = new Set();\n\n  // Add first click position to safe set\n  safePositions.add(`${firstClickPos.x},${firstClickPos.y}`);\n\n  // Add neighboring positions to safe set\n  traverseNeighbors(board, board[firstClickPos.x][firstClickPos.y], neighbor => {\n    safePositions.add(`${neighbor.pos.x},${neighbor.pos.y}`);\n  });\n\n  // Place mines randomly on the board, avoiding safe positions\n  let minesPlaced = 0;\n  while (minesPlaced < totalMines) {\n    const x = Math.floor(Math.random() * rows);\n    const y = Math.floor(Math.random() * cols);\n    const posKey = `${x},${y}`;\n\n    // Check if position is safe and doesn't already have a mine\n    if (!safePositions.has(posKey) && !isMine(board[x][y])) {\n      board[x][y].bombs = MINE;\n      minesPlaced++;\n    }\n  }\n\n  // Calculate numbers for each cell\n  fillBombsCount(board);\n}\nfunction fillBombsCount(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const cell = board[i][j];\n\n      // Skip mines\n      if (isMine(cell)) continue;\n\n      // Count mines in neighboring cells\n      let count = 0;\n      traverseNeighbors(board, cell, neighbor => {\n        if (isMine(neighbor)) {\n          count++;\n        }\n      });\n      cell.bombs = count;\n    }\n  }\n}\n\n// Create a new empty game (no mines placed yet)\nfunction newGame(rows, cols, mines) {\n  const board = createEmptyBoard(rows, cols);\n  return new Game(board, false, mines);\n}\n\n// Handle first click and place mines\nfunction handleFirstClick(game, field) {\n  // Create a deep copy of the board\n  const newState = createDeepCopy(game.state);\n\n  // Place mines, avoiding first click and its neighbors\n  placeMines(newState, field.pos, game.totBombs);\n\n  // Open the clicked cell and surrounding cells if it's a 0\n  const clickedCell = newState[field.pos.x][field.pos.y];\n  clickedCell.isOpened = true;\n  if (clickedCell.bombs === 0) {\n    openEmptyCells(newState, clickedCell);\n  }\n  return new Game(newState, false, game.totBombs);\n}\nfunction openCell(game, field) {\n  // Skip if cell is already opened or flagged\n  if (field.isFlagged || field.isOpened) return game;\n\n  // Check if this is the first click\n  const isFirstClick = !game.state.some(row => row.some(cell => cell.isOpened || isMine(cell)));\n\n  // Handle first click specially\n  if (isFirstClick) {\n    return handleFirstClick(game, field);\n  }\n\n  // Regular click handling for subsequent clicks\n  const newState = createDeepCopy(game.state);\n  const clickedCell = newState[field.pos.x][field.pos.y];\n\n  // If mine, game over\n  if (isMine(clickedCell)) {\n    revealAllMines(newState);\n    return new Game(newState, true, game.totBombs);\n  }\n\n  // Open the cell\n  clickedCell.isOpened = true;\n\n  // If empty, open surrounding cells\n  if (clickedCell.bombs === 0) {\n    openEmptyCells(newState, clickedCell);\n  }\n  return new Game(newState, false, game.totBombs);\n}\nfunction openEmptyCells(board, startCell) {\n  const visited = new Set();\n  const queue = [startCell];\n  while (queue.length > 0) {\n    const cell = queue.shift();\n    const key = `${cell.pos.x},${cell.pos.y}`;\n    if (visited.has(key)) continue;\n    visited.add(key);\n    cell.isOpened = true;\n\n    // If cell has no adjacent mines, explore neighbors\n    if (cell.bombs === 0) {\n      traverseNeighbors(board, cell, neighbor => {\n        if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n          queue.push(neighbor);\n        }\n      });\n    }\n  }\n}\nfunction toggleFlag(game, field) {\n  if (field.isOpened) return game;\n  const newState = createDeepCopy(game.state);\n  const cell = newState[field.pos.x][field.pos.y];\n  cell.isFlagged = !cell.isFlagged;\n  return new Game(newState, game.isOver, game.totBombs);\n}\nfunction checkCompleted(game) {\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      const cell = game.state[i][j];\n\n      // If a non-mine cell is not opened, game is not complete\n      if (!isMine(cell) && !cell.isOpened) {\n        return false;\n      }\n\n      // If a mine is not flagged, game is not complete\n      if (isMine(cell) && !cell.isFlagged) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction countFlagged(game) {\n  let count = 0;\n  for (let i = 0; i < game.state.length; i++) {\n    for (let j = 0; j < game.state[i].length; j++) {\n      if (game.state[i][j].isFlagged) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction revealAllMines(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (isMine(board[i][j])) {\n        board[i][j].isOpened = true;\n      }\n    }\n  }\n}\nfunction createDeepCopy(state) {\n  return state.map(row => row.map(cell => new Mine({\n    x: cell.pos.x,\n    y: cell.pos.y\n  }, cell.bombs, cell.isFlagged, cell.isOpened)));\n}\nexport const game = {\n  newGame,\n  fillBombsCount,\n  countFlagged,\n  isCompleted: checkCompleted,\n  markMine: toggleFlag,\n  openMine: openCell\n};","map":{"version":3,"names":["Game","Mine","MINE","dx","dy","isMine","mine","bombs","traverseNeighbors","board","callback","x","y","pos","i","length","newX","newY","createEmptyBoard","rows","cols","row","j","push","placeMines","firstClickPos","totalMines","safePositions","Set","add","neighbor","minesPlaced","Math","floor","random","posKey","has","fillBombsCount","cell","count","newGame","mines","handleFirstClick","game","field","newState","createDeepCopy","state","totBombs","clickedCell","isOpened","openEmptyCells","openCell","isFlagged","isFirstClick","some","revealAllMines","startCell","visited","queue","shift","key","toggleFlag","isOver","checkCompleted","countFlagged","map","isCompleted","markMine","openMine"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/gameLogic/game.ts"],"sourcesContent":["import { Game, Mine, Point } from './gameDomain';\n\nconst MINE = -1;\nconst dx = [-1, 0, 1, -1, 1, -1, 0, 1];\nconst dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n\n// Helper functions\nfunction isMine(mine: Mine): boolean {\n    return mine.bombs === MINE;\n}\n\nfunction traverseNeighbors(board: Mine[][], mine: Mine, callback: (field: Mine) => void): void {\n    const { x, y } = mine.pos;\n    \n    for (let i = 0; i < dx.length; i++) {\n        const newX = x + dx[i];\n        const newY = y + dy[i];\n        \n        // Check if coordinates are within bounds\n        if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length) {\n            callback(board[newX][newY]);\n        }\n    }\n}\n\n// Create an empty board with no mines\nfunction createEmptyBoard(rows: number, cols: number): Array<Array<Mine>> {\n    const board: Mine[][] = [];\n\n    // Initialize a board with no mines\n    for(let i = 0; i < rows; i++){\n        const row: Mine[] = [];\n        for(let j = 0; j < cols; j++){\n            row.push(new Mine({x: i, y: j}, 0, false, false));\n        }\n        board.push(row);\n    }\n    \n    return board;\n}\n\n// Place mines after the first click\nfunction placeMines(board: Array<Array<Mine>>, firstClickPos: Point, totalMines: number): void {\n    const rows = board.length;\n    const cols = board[0].length;\n    \n    // Set of positions to avoid (first click and its neighbors)\n    const safePositions = new Set<string>();\n    \n    // Add first click position to safe set\n    safePositions.add(`${firstClickPos.x},${firstClickPos.y}`);\n    \n    // Add neighboring positions to safe set\n    traverseNeighbors(board, board[firstClickPos.x][firstClickPos.y], (neighbor) => {\n        safePositions.add(`${neighbor.pos.x},${neighbor.pos.y}`);\n    });\n    \n    // Place mines randomly on the board, avoiding safe positions\n    let minesPlaced = 0;\n    while (minesPlaced < totalMines) {\n        const x = Math.floor(Math.random() * rows);\n        const y = Math.floor(Math.random() * cols);\n        const posKey = `${x},${y}`;\n\n        // Check if position is safe and doesn't already have a mine\n        if (!safePositions.has(posKey) && !isMine(board[x][y])) {\n            board[x][y].bombs = MINE;\n            minesPlaced++;\n        }\n    }\n    \n    // Calculate numbers for each cell\n    fillBombsCount(board);\n}\n\nfunction fillBombsCount(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            const cell = board[i][j];\n            \n            // Skip mines\n            if (isMine(cell)) continue;\n            \n            // Count mines in neighboring cells\n            let count = 0;\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (isMine(neighbor)) {\n                    count++;\n                }\n            });\n            \n            cell.bombs = count;\n        }\n    }\n}\n\n// Create a new empty game (no mines placed yet)\nfunction newGame(rows: number, cols: number, mines: number): Game {\n    const board = createEmptyBoard(rows, cols);\n    return new Game(board, false, mines);\n}\n\n// Handle first click and place mines\nfunction handleFirstClick(game: Game, field: Mine): Game {\n    // Create a deep copy of the board\n    const newState = createDeepCopy(game.state);\n    \n    // Place mines, avoiding first click and its neighbors\n    placeMines(newState, field.pos, game.totBombs);\n    \n    // Open the clicked cell and surrounding cells if it's a 0\n    const clickedCell = newState[field.pos.x][field.pos.y];\n    clickedCell.isOpened = true;\n    \n    if (clickedCell.bombs === 0) {\n        openEmptyCells(newState, clickedCell);\n    }\n    \n    return new Game(newState, false, game.totBombs);\n}\n\nfunction openCell(game: Game, field: Mine): Game {\n    // Skip if cell is already opened or flagged\n    if (field.isFlagged || field.isOpened) return game;\n    \n    // Check if this is the first click\n    const isFirstClick = !game.state.some(row => \n        row.some(cell => cell.isOpened || isMine(cell))\n    );\n    \n    // Handle first click specially\n    if (isFirstClick) {\n        return handleFirstClick(game, field);\n    }\n    \n    // Regular click handling for subsequent clicks\n    const newState = createDeepCopy(game.state);\n    const clickedCell = newState[field.pos.x][field.pos.y];\n    \n    // If mine, game over\n    if (isMine(clickedCell)) {\n        revealAllMines(newState);\n        return new Game(newState, true, game.totBombs);\n    }\n    \n    // Open the cell\n    clickedCell.isOpened = true;\n    \n    // If empty, open surrounding cells\n    if (clickedCell.bombs === 0) {\n        openEmptyCells(newState, clickedCell);\n    }\n    \n    return new Game(newState, false, game.totBombs);\n}\n\nfunction openEmptyCells(board: Array<Array<Mine>>, startCell: Mine): void {\n    const visited = new Set<string>();\n    const queue: Mine[] = [startCell];\n    \n    while (queue.length > 0) {\n        const cell = queue.shift()!;\n        const key = `${cell.pos.x},${cell.pos.y}`;\n        \n        if (visited.has(key)) continue;\n        visited.add(key);\n        \n        cell.isOpened = true;\n        \n        // If cell has no adjacent mines, explore neighbors\n        if (cell.bombs === 0) {\n            traverseNeighbors(board, cell, (neighbor) => {\n                if (!neighbor.isOpened && !neighbor.isFlagged && !isMine(neighbor)) {\n                    queue.push(neighbor);\n                }\n            });\n        }\n    }\n}\n\nfunction toggleFlag(game: Game, field: Mine): Game {\n    if (field.isOpened) return game;\n    \n    const newState = createDeepCopy(game.state);\n    const cell = newState[field.pos.x][field.pos.y];\n    cell.isFlagged = !cell.isFlagged;\n    \n    return new Game(newState, game.isOver, game.totBombs);\n}\n\nfunction checkCompleted(game: Game): boolean {\n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            const cell = game.state[i][j];\n            \n            // If a non-mine cell is not opened, game is not complete\n            if (!isMine(cell) && !cell.isOpened) {\n                return false;\n            }\n            \n            // If a mine is not flagged, game is not complete\n            if (isMine(cell) && !cell.isFlagged) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nfunction countFlagged(game: Game): number {\n    let count = 0;\n    \n    for (let i = 0; i < game.state.length; i++) {\n        for (let j = 0; j < game.state[i].length; j++) {\n            if (game.state[i][j].isFlagged) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\nfunction revealAllMines(board: Array<Array<Mine>>): void {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (isMine(board[i][j])) {\n                board[i][j].isOpened = true;\n            }\n        }\n    }\n}\n\nfunction createDeepCopy(state: Array<Array<Mine>>): Array<Array<Mine>> {\n    return state.map(row => \n        row.map(cell => \n            new Mine(\n                { x: cell.pos.x, y: cell.pos.y },\n                cell.bombs,\n                cell.isFlagged,\n                cell.isOpened\n            )\n        )\n    );\n}\n\nexport const game = {\n    newGame,\n    fillBombsCount,\n    countFlagged,\n    isCompleted: checkCompleted,\n    markMine: toggleFlag,\n    openMine: openCell\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}