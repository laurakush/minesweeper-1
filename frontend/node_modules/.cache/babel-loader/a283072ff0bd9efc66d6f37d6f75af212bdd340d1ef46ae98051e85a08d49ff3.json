{"ast":null,"code":"var _jsxFileName = \"/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { time } from '../gameLogic/time';\nimport { GameControls, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\nimport './styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  initialRows,\n  initialCols,\n  initialMines,\n  initialDifficulty\n}) => {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState(game.newGame(initialRows, initialCols, initialMines));\n  const [flaggedCount, setFlaggedCount] = useState(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n\n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState(initialDifficulty);\n\n  // Timer logic\n  useEffect(() => {\n    // Stop timer if game is over (win or loss)\n    if (gameState.isOver) return;\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Update state after each move\n  useEffect(() => {\n    setFlaggedCount(game.countFlagged(gameState));\n  }, [gameState]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback(field => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field, e) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n\n    // Prevent context menu from showing\n    e.preventDefault();\n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback(difficulty => {\n    const config = DIFFICULTY[difficulty];\n    const {\n      rows: newRows,\n      cols: newCols,\n      mines: newMines\n    } = config;\n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      flagCount: flaggedCount,\n      totalBombs: gameState.totBombs,\n      elapsedTime: elapsedSeconds,\n      formattedTime: formattedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(GameControls, {\n        currentDifficulty: currentDifficulty,\n        isGameOver: gameState.isOver,\n        onNewGame: startNewGame,\n        onReset: resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MineField, {\n        game: gameState,\n        onLeftClick: handleLeftClick,\n        onRightClick: handleRightClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), gameState.isOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-result ${gameState.isWon ? 'win' : 'lose'}`,\n        children: [gameState.isWon ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDF89 You Win! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCA5 Game Over! \\uD83D\\uDCA5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameState.isWon ? `You completed the game in ${formattedTime}!` : 'Better luck next time!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"nrjr3bauk0m4XdyrRY23woUGumo=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MineField","game","time","GameControls","DIFFICULTY","GameHeader","jsxDEV","_jsxDEV","Game","initialRows","initialCols","initialMines","initialDifficulty","_s","gameState","setGameState","newGame","flaggedCount","setFlaggedCount","elapsedSeconds","setElapsedSeconds","currentDifficulty","setCurrentDifficulty","isOver","timerId","setInterval","prev","clearInterval","countFlagged","handleLeftClick","field","openMine","handleRightClick","e","preventDefault","markMine","startNewGame","difficulty","config","rows","newRows","cols","newCols","mines","newMines","resetGame","formattedTime","timer","children","flagCount","totalBombs","totBombs","elapsedTime","fileName","_jsxFileName","lineNumber","columnNumber","className","isGameOver","onNewGame","onReset","onLeftClick","onRightClick","isWon","_c","$RefreshReg$"],"sources":["/Users/laurakushnir/Documents/Minesweeper-TS/minesweeper-1/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { MineField } from './MineField';\nimport { game } from '../gameLogic/game';\nimport { Game as GameType, Mine } from '../gameLogic/gameDomain';\nimport { time } from '../gameLogic/time';\nimport { GameControls, DifficultyLevel, DIFFICULTY } from './GameControls';\nimport { GameHeader } from './GameHeader';\nimport './styles/Game.css';\n\ninterface GameProps {\n  initialRows: number;\n  initialCols: number;\n  initialMines: number;\n  initialDifficulty: DifficultyLevel;\n}\n\nconst Game: React.FC<GameProps> = ({ \n  initialRows, \n  initialCols, \n  initialMines,\n  initialDifficulty \n}) => {\n  // Game state\n  const [gameState, setGameState] = useState<GameType>(\n    game.newGame(initialRows, initialCols, initialMines)\n  );\n  const [flaggedCount, setFlaggedCount] = useState<number>(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState<number>(0);\n  \n  // Configuration state\n  const [currentDifficulty, setCurrentDifficulty] = useState<DifficultyLevel>(initialDifficulty);\n\n  // Timer logic\n  useEffect(() => {\n    // Stop timer if game is over (win or loss)\n    if (gameState.isOver) return;\n\n    const timerId = setInterval(() => {\n      setElapsedSeconds(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timerId);\n  }, [gameState]);\n\n  // Update state after each move\n  useEffect(() => {\n    setFlaggedCount(game.countFlagged(gameState));\n  }, [gameState]);\n\n  // Left click handler - reveal cell\n  const handleLeftClick = useCallback((field: Mine) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    \n    setGameState(prev => game.openMine(prev, field));\n  }, [gameState]);\n\n  // Right click handler - toggle flag\n  const handleRightClick = useCallback((field: Mine, e: React.MouseEvent) => {\n    // Skip if game is already over\n    if (gameState.isOver) return;\n    \n    // Prevent context menu from showing\n    e.preventDefault();\n    \n    setGameState(prev => game.markMine(prev, field));\n  }, [gameState]);\n\n  // Start a new game with a specific difficulty\n  const startNewGame = useCallback((difficulty: DifficultyLevel) => {\n    const config = DIFFICULTY[difficulty];\n    const { rows: newRows, cols: newCols, mines: newMines } = config;\n    \n    setCurrentDifficulty(difficulty);\n    setGameState(game.newGame(newRows, newCols, newMines));\n    setFlaggedCount(0);\n    setElapsedSeconds(0);\n  }, []);\n\n  // Reset the game with current difficulty\n  const resetGame = useCallback(() => {\n    startNewGame(currentDifficulty);\n  }, [currentDifficulty, startNewGame]);\n\n  // Format the time for display\n  const formattedTime = time.timer(elapsedSeconds);\n\n  return (\n    <div>\n      <GameHeader\n        flagCount={flaggedCount}\n        totalBombs={gameState.totBombs}\n        elapsedTime={elapsedSeconds}\n        formattedTime={formattedTime}\n      />\n      \n      <div className=\"game\">\n        <GameControls\n          currentDifficulty={currentDifficulty}\n          isGameOver={gameState.isOver}\n          onNewGame={startNewGame}\n          onReset={resetGame}\n        />\n        \n        <MineField\n          game={gameState}\n          onLeftClick={handleLeftClick}\n          onRightClick={handleRightClick}\n        />\n\n        {gameState.isOver && (\n          <div className={`game-result ${gameState.isWon ? 'win' : 'lose'}`}>\n            {gameState.isWon ? \n              <h2>ðŸŽ‰ You Win! ðŸŽ‰</h2> : \n              <h2>ðŸ’¥ Game Over! ðŸ’¥</h2>\n            }\n            <p>{gameState.isWon ? \n                 `You completed the game in ${formattedTime}!` : \n                 'Better luck next time!'}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}